name: Validate SWE-bench Data Points

on:
  push:
    branches: [ main, master ]
    paths:
      - 'data_points/**'
  pull_request:
    branches: [ main, master ]
    paths:
      - 'data_points/**'

jobs:
  validate-datapoints:
    name: Validate Data Points
    runs-on: ubuntu-latest
    permissions:
      contents: read
      issues: write
      pull-requests: write
    
    strategy:
      matrix:
        python-version: ["3.10", "3.11", "3.12"]
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Full history for git diff
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Set up Docker
      run: |
        # Docker is pre-installed in GitHub Actions runners
        # Just ensure it's running and accessible
        sudo systemctl start docker
        sudo usermod -aG docker $USER
        # Verify Docker installation
        docker --version
        docker info
    
    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then
          pip install -r requirements.txt
        else
          pip install rich click swebench docker
        fi
    
    - name: Get changed data point files
      id: changed-files
      run: |
        if [ "${{ github.event_name }}" = "pull_request" ]; then
          BASE_SHA="${{ github.event.pull_request.base.sha }}"
          HEAD_SHA="${{ github.event.pull_request.head.sha }}"
        else
          BASE_SHA="${{ github.event.before }}"
          HEAD_SHA="${{ github.event.after }}"
        fi
        
        CHANGED_FILES=$(git diff --name-only --diff-filter=AM $BASE_SHA $HEAD_SHA | grep '^data_points/.*\.json$' || true)
        
        if [ -n "$CHANGED_FILES" ]; then
          echo "Changed data point files:"
          echo "$CHANGED_FILES"
          echo "changed_files<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGED_FILES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
        else
          echo "No data point files changed"
          echo "changed_files=" >> $GITHUB_OUTPUT
        fi
    
    - name: Validate changed data points
      id: validation
      run: |
        if [ -n "${{ steps.changed-files.outputs.changed_files }}" ]; then
          echo "Starting validation of changed data points..."
          
          export CHANGED_FILES="${{ steps.changed-files.outputs.changed_files }}"
          
          python scripts/validate_changed.py
          
        else
          echo "No data points to validate"
          echo "passed=0" >> $GITHUB_OUTPUT
          echo "failed=0" >> $GITHUB_OUTPUT
          echo "total=0" >> $GITHUB_OUTPUT
        fi
    
    - name: Comment on PR
      if: github.event_name == 'pull_request' && steps.changed-files.outputs.changed_files != '' && github.event.pull_request.head.repo.full_name == github.repository
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          try {
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('SWE-bench Validation Results')
          );
          
          const passed = ${{ steps.validation.outputs.passed || 0 }};
          const failed = ${{ steps.validation.outputs.failed || 0 }};
          const total = ${{ steps.validation.outputs.total || 0 }};
          
          let status = '‚úÖ PASSED';
          if (failed > 0) {
            status = '‚ùå FAILED';
          }
          
          const comment = `## üîç SWE-bench Validation Results
          
          **Status**: ${status}
          **Changed Data Points**: ${total}
          **Passed**: ${passed} ‚úÖ
          **Failed**: ${failed} ‚ùå
          
          ${failed > 0 ? '**Action Required**: Please fix the failed validations before merging.' : '**All validations passed successfully!**'}
          
          ---
          *This comment was automatically generated by the SWE-bench validation workflow.*`;
          
          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment,
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment,
            });
          }
          } catch (error) {
            console.log('Failed to comment on PR:', error.message);
            console.log('This is expected for fork PRs or repositories with restricted permissions.');
          }
    
    - name: Fail if validation failed
      if: steps.validation.outputs.failed != '0'
      run: |
        echo "‚ùå Data point validation failed!"
        echo "Please fix the validation errors before merging."
        exit 1
    
    - name: Success message
      if: steps.validation.outputs.failed == '0' && steps.validation.outputs.total != '0'
      run: |
        echo "‚úÖ All data point validations passed successfully!"
        echo "Changed files: ${{ steps.changed-files.outputs.changed_files }}"
